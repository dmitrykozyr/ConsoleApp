############################################################################
######## ЗАПУСК VAULT В РЕЖИМЕ DEV #########################################
############################################################################

Скачать клиент https://developer.hashicorp.com/vault/install и распаковать

В терминале CMD переходим в данный каталог и выполняем команду ниже,
после чего запустится локальный сервер

    vault server -dev

НЕЛЬЗЯ ИСПОЛЬЗОВАТЬ РЕЖИМ РАЗРАБОТКИ НА ПРОД,
т.к. в этом режиме секреты хранятся в памяти и будут утеряны при перезапуске Vault

Через NuGet установить пакет VaultSharp 1.17.5.1

############################################################################
######## ЗАПУСК VAULT В РЕЖИМЕ PROD ########################################
############################################################################

По умолчанию хранилище запечатано и его нужно распечатать

Генерируются 5 секретных ключей, которые распределяются среди инженеров.
Для распечатывания необходимо ввести одновременно 3 ключей из 5.
При перезапуске Vault требуется повторное распечатывание хранилища.

Для запуска Vault в режиме ПРОД, создадим конфигурационный файл
и положим в корень папки со скачанным Vault:

    # vault.hcl

    storage "file"
    {
        # Путь к директории, где будет храниться состояние Vault
        path = "/Data"
    }
 
    listener "tcp"
    {
        address = "127.0.0.1:8200"
     
        # Включите TLS для продакшн-среды (0 - вкл, 1 - выкл)
        tls_disable = 1
    }
 
Адрес, по которому к Vault можно будет обращаться через Api:

    api_addr = "http://127.0.0.1:8200/"

Запустим Vault с использованием созданного конфигурационного файла:

    vault server -config=vault.hcl

После запуска Vault, в другом терминале установим переменную окружения:

    set VAULT_ADDR=http://127.0.0.1:8200

Инициализируем Vault:

    vault operator init

Посмотреть статус Vault (инициализирован и запечатан или нет):

    vault status

После инициализации получим 5 ключей разблокировки и 1 токен:

Ключи нужны для разблокировки Vault, выполняем последовательно команды:

    vault operator unseal [unseal_key_1]
    vault operator unseal [unseal_key_2]
    vault operator unseal [unseal_key_3]

После разблокировки проходим аутентификацию токеном администратора

Данный токен вставляем в HEADER каждого запроса при обращении к хранилищу, если работаем через REST

    vault login [initial_root_token]

Наши секреты будут храниться в каталоге secret,
но сейчас у токена нет достаточных прав для доступа к пути secret,
поэтому создадим в корневой папке Valut конфигурационный файл
с описанием политик данного каталога:

    # vault-policy.hcl

    path "secret/*"
    {
        capabilities = ["create", "read", "update", "delete", "list"]
    }

Прочитаем данный файл:

    vault policy write my-policy vault-policy.hcl

Если используем токен, не имеющий данной политики,
нужно создать новый токен с ней или обновить текущий

Создадим новый токен с учетом новых политик:

    vault token create -policy=my-policy

Есть несколько вариантов аутентификации:
через GitHub, LDAP, Token и др, выберем Token:

    vault auth enable token

Получаем новый токен - проходим с ним аутентификацию:

    vault login [token]

Выше создали каталог secret, теперь активируем его:

    vault secrets enable -path=secret kv

В списке секретов должны увидеть каталог secret:

    vault secrets list

Добавление секрета:

    // Шаблон запроса
    vault kv put secret/[название секрета] [название секрета]=[значение секрета в кавычках ""]
 
    // Реальный запрос
    vault kv put secret/password1 password1="123"

Если нужно перезаписать существующий секрет,
выполняем команду выше с новым значением [значение секрета]

Получение секрета:

    // Шаблон запроса
    vault kv get secret/[название секрета]
 
    // Реальный запрос
    vault kv get secret/password1

Список секретов в заданном каталоге:

    // Шаблон запроса
    vault list [название каталога]
 
    // Реальный запрос
    vault list secret

Удаление секрета:

    // Шаблон запроса
    vault list [путь к секрету/имя секрета]
 
    // Реальный запрос
    vault delete secret/password1

############################################################################
######## АВТОМАТИЗАЦИЯ АУТЕНТИФИКАЦИИ ЧЕРЕЗ *.BAT-ФАЙЛЫ ####################
############################################################################

В корневой папке с Vault создадим папку BatFiles со следующими файлами:

# Start Vault server.bat

    cd ..
    vault server -config=vault.hcl

# Enter key 1.bat

    cd ..
    set VAULT_ADDR=http://127.0.0.1:8200
    vault operator unseal [ключ 1/5]

# Enter key 2.bat

    cd ..
    set VAULT_ADDR=http://127.0.0.1:8200
    vault operator unseal [ключ 2/5]

############################################################################
######## ПОЛУЧЕНИЕ СЕКРЕТОВ ЧЕРЕЗ POSTMAN ##################################
############################################################################

Нужно отправить GET-запрос:

http://127.0.0.1:8200/v1/secret/TOKEN_PASSWORD_1, где:
- http://127.0.0.1:8200 адрес сервера, его можно увидеть в терминале после запуска сервера Vault
- v1 используемая версия движка, может быть v2
- secret путь к секрету
- TOKEN_PASSWORD_1 название секрета
- Header:
  Key:      X-Vault-Token
  value:    hvs.[токен аутентификации]

############################################################################
######## ДОП. РЕКОМЕНДАЦИИ #################################################
############################################################################

- в конфиге включите TLS и настройте аутентификацию для обеспечения безопасности;
- нужно использовать HTTPS с настроенными сертификатами для защиты данных при передаче;
- настройте регулярное резервное копирование данных;
- рекомендуется использовать кластер Kubernetes с трем экземплярами Vault для надежности;
- для отслеживания состояния Vault можно использовать Prometheus, Grafana.
