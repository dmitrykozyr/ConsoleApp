Kafka - это брокер сообщений, который используется в микросервисной архитектуре
для пересылки сообщений между сервисами

При использовании Kafka микросервисная архитектура становися похожей на Enterprise Service Bus,
когда сервисы не здают друг об друге, а центральный узел знает

Сообщения поступают от Producer к Consumer
Один Producer может отправлять сообщения одному | нескольким | всем Consumer

Ф-ии брокера:
- прием сообщений
- хранение
- выдача

Producer_1   ->   |       |   ->   Consumer_1
Producer_2   ->   | Kafka |   ->   Consumer_2
Producer_3   ->   |       |   ->   Consumer_3

У нас есть Kafka Cluster, внутри которого есть несколько брокеров, которые нужны для репликации данных
Zookeeper (смотритель зоопарка) - это координатор (оркестратор) этих нескольких брокеров, в котором хранится
конфигурация и состояние кластера

У брокера есть топик, а у топика партиции, в которых хранятся сообщения
В каждом брокере должны храниться реплики (копии) партиций из других брокеров
У каждой партиции могут быть копии и одна главная Leader-партиция - только в нее пишутся данные и из нее читаются,
а в остальные происходит реплицирование
Если Leader становится недоступен, то Zookeeper назначает другого Leader из списка реплик
При чем некоторые реплики могут хранить неактуальные данные, поэтому некоторые реплики помечены как ISR,
в них репликация идет в первую очередь и из их списка выбирается новый Leader
Не должно быть такого, что все Leader находятся на одном брокере - на него будет сильная нагрузка,
нужно распределить по разным брокерам

|----------------------------------------------|
            | Broker_1 | Topic A | Partition_0 |
            |          |         |             |
            |----------|-----------------------|
 Zookeeper  | Broker_2 | Topic A | Partition_1 |
            |          |         | Partition_2 | В этом брокере 2 партиции, а в следующем 0 - несбалансированность
            |----------|-----------------------|
            | Broker_3 | Topic A | Partition_0 | Репликация партиции из первого брокера для надежности
            |          |         |             |
|----------------------------------------------|

Структура отправляемого через Kafka сообщения:
| Key | Value | Time | Headers |

Настройка:
Для запуска Kafka нужен Docker - устанавливаем и запускаем
Скачиваем архив с Kafka с офф. сайта https://kafka.apache.org/downloads
Распаковываем так, чтобы путь не содержал пробелов и русских букв
Устанавливаем Java, в консоли можем проверить, установлена-ли она
- java -version
В папке bin есть файлы .sh для Linux, нам нужна вложенная папка Windows с файлами .bat для Windows
Команды, запускающие и останавливающие Kafka можно запустить отсюда или через консоль
- kafka-server-start.bat
- kafka-server-stop.bat
В Docker запускаем контейнер Zookeeper
В консоли для папки bin\windows\ выполняем:
- kafka - topics.bat
