public class A
{
	#region JSON

		// Неидемпотентные методы могут приводить к различным результатам при многократном выполнении одного и того же запроса

        GET								| 1XX информация		| идемпотентный
        POST	(создать)				| 2XX успех				| неидемпотентный
        PUT		(изменить)				| 3XX перенаправление	| идемпотентный
        PATCH	(частично изменить)		| 4XX ошибка клиента	| неидемпотентный
		DELETE							| 5XX ошибка сервера	| идемпотентный

        Передача сообщений в формате JSON (удобнее) или XML
		Не хранит состояние
		Ответ от сервера может быть кеширован на время и использоваться без новых запросов
		Многоуровневая (Layered) архитектура - на сервере может быть любое число слоев абстракции

        JSON - текстовый, медленный
        HTTP/1 - большая задержка
        Отправка сообщений от клиента к серверу
        Поддерка запрос/ответ
        CRUD-операции
        Генерация кода на Swagger
        Статус коды 100-500

        // RESTful(REST:API)
		Контракт REST строится вокруг методов HTTP GET, POST, PUT, DELETE и схемы url
		Клиент получает и отправляет данные на сервер через формирование запросов по URL адресам
		Используется в микросервисах

		// JSON:API
		Данные с сервера приходят в JSON

		// GraphQL
		В REST ограниченное число эндпоинтов и для получения данных нужно много запросов
		В GraphQL запрос один и можем указать, какие данные получить
		Подходит, если пользователь делает много запросов к БД
		Все запросы имеют тип POST

    #endregion

    #region  RPC

        // SOAP
        Устаревший формат
		Передача сообщений в формате XML, что обеспечивает платформонезависимость
		Передача по протоколу HTTP

		Сообщение XML-SOAP имеют четкую структуру:
		- Envelope	- определяет сообщение и пространство имен
		- Header	- содержит атрибуты с информацией об безопасности и сетевой маршрутизации
		- Body		- содержит сообщение
		- Fault		- содержит информацию об ошибках, произошедших при обработке сообщения

		Следует использовать, если необходимы:
		- строгая спцификация сообщений
		- расширенные механизмы безопасности
		- поддержка сложных транзакций
		- поддержка протоколов, кроме HTTP

		// JSON-RPC
		Спецификация, как представлять запросы и ответы на странице в формате JSON

		// gRPC
		Система удалённого вызова процедур, предоставляет ф-ии:
		- сервисам, написанным на разных языках, общаться между собой при помощи де/сериализации через протокол Protobuf
		- аутентификация (TLS и аутентификации на основе токенов)
		- двунаправленная потоковая передача и управление потоком
		- блокирующие или неблокирующие привязки
		- отмена и тайм-ауты

		Protobuf - бинарный, быстрый
		HTTP/2 - меньше задержка, сжатие
		Двунаправленный, асинхронный
		Поддержка потоков(stream)
		Вызываем готовые процедуры на сервере
		Генерация кода на Protobuf в файле.proto
		Статус коды 0-16

	#endregion

	#region IResult, IActionResult, ActionResult

		// IResult
		Представляет результат выполнения операции в более низком уровне абстракции
		Используется в минимальных API
		Позволяет гибко управлять результатами, включая различные типы ответов, такие как JSON, текст, файлы

			public IResult Get()
			{
				return Results.Ok(new { message = "Hello World" });
			}

		// IActionResult
		Представляет результат действия контроллера и является частью MVC
		Используется в классических контроллерах MVC для возврата различных типов ответов, таких как представления, JSON, редиректы
		Позволяет возвращать множество различных типов результатов

			public IActionResult Get()
			{
				return Ok(new { message = "Hello World" });
			}

		// ActionResult<T>
		Реализует интерфейс IActionResult
		Предоставляет возможность возвращать как конкретные типы результатов (OkObjectResult, NotFoundResult), так и обобщенные результаты
		Можно вернуть как Ok(), так и NotFound() из одного метода

			public ActionResult<string> Get()
			{
				if (someCondition)
				{
					return Ok("Hello World");
				}
				return NotFound();
			}
  
    #endregion
}
