public class A
{
	#region LANDSCAPE PATTERNS, физическая архитектура
			
	Monolith - подходит для небольших приложений
		+ простая структура
		+ просто тестировать
		+ просто деплоить
		+ запросы быстро передаются между частями программы
		- код быстро усложняется
		- сложно поддерживать и расширять

	N-Tier - приложение разделяется на несколько tiers (устаревшая архитектура):
		- Presentation	(Браузер)
		- BuisnessLogic	(Веб-сервер на каком-либо хостинге)
		- Data			(БД)
		Браузер и БД общаются через веб-сервер
		Если ничего не сохраняется в БД, то слой Data не нужен, достаточно первых двух
		Элементов Presentation обычно мого, т.к. к одному веб-серверу могут обращаться из многих браузеров
		Tiers могут находиться на одной машине или на разных серверах

		+ Tiers могут быть физически разделены, то есть быть на разных машинах
		+ Могут разрабатываться независимо друг от друга
		+ В случае большой нагрузки можем добавить веб-сервер(ы) и балансировщик нагрузки
		- Изменения в одном Tier могут требовать изменений в другом

	Service-Oriented - состоит из нескольких сервисов, каждый отвечает за свою бизнес-активность
		Сервисы не знают друг о друге - общаются между собой через центральный модуль - Enterprise Service Bus(ESB),
		а он отправляет запрос на другой сервис
		Общение происходит по HTTP, FTP, TCP и другим протоколам передачи данных
		+ Простая расширяемость
		+ Нет повторяющегося функционала
		- Ошибки в ESB могут сломать всю систему

	Microservices - состоит из нескольких сервисов, каждый отвечает за свою бизнес-активность
		Сервисы общаются напрямую друг с другом
		+ Слабая связность, простая расширяемость
		+ Позволяет автоматизировать тестирование, деплоймент и мониторинг

	Serverless

	Peer to peer - нет центрального сервера, машины общаются между собой напрямую
		Может быть сервер, где регистрируются новые машины, а старую получают о ней информацию
		и потом они опять общаются напрямую без сервера
		- небезопасно

	#endregion

	#region STRUCTURE PATTERNS, логическая архитектура

	Layered - есть несколько слоев, по которым идет запрос от первого слоя к последнему, но не наоборот
	Слои:
		- Presentation:				UI
		- Application (Service):    Translate between UI and business logic
		- Business logic					
		- Persistence:				Code to interact with DB
		- Data
	+ Легко написать, код структурирован
	+ Благодаря изолированности слоев, изменение логики в одном слое не требует изменения в другом слое
	- Такой подход ведет к монолитному приложению, который потом сложно разбить на сервисы
	- Нужно писать много кода, чтобы перебрасывать запрос с одного слоя на другой

	#endregion

	#region UI PATTERNS

	MVC
		Для подключения к БД нужно
		- в appsettings.json указать ConnectionString
		- создать модель
		- в папке Data создать класс ApplicationDbContext, добавить туда тип модели
		- установить пакет Microsoft.EntityFrameworkCore.SqlServer
		- в Program.cs добавить AddDbContext
		- для создания миграций установить пакет Microsoft.EntityFrameworkCore.Tools
		- в Package Console Manager создать миграцию:
		- add-migration [Migration name]
		- update-database
		- после этого в БД увидим новую таблицу

		Папка wwwroot нужнa для статичных файлов (картинок, js кода, css)
		Если есть HomeController, то в папке Views должна быть папка Home и в ней лежать нужные Views,
		а их имя должно совпадать с action-методами в HomeController
		В папке Views есть папка Shared, в ней находятся View, которые могут быть вызваны из других View

	MVVM
		https://www.youtube.com/watch?v=fZxZswmC_BY&list=PLA8ZIAm2I03hS41Fy4vFpRw8AdYNBXmNm&index=2
		Когда создали Model, View и ViewModel, нужно создать команды (в папке Commands),
		которые обрабатывают события нажатия на кнопки
		CommandBase - абстрактный класс с базовым функционалом для всех комманд
		Публикация https://www.youtube.com/watch?v=I_Lj2_IkmtA

	MVP
		Используется в Android

	#endregion
}