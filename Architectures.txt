Типы архитектур приложения:
https://www.linkedin.com/learning/software-architecture-patterns-for-developers/best-practices-and-blueprints?autoAdvance=true&autoSkip=false&autoplay=true&resume=false&u=2113185

================== LANDSCAPE PATTERNS ==================
Monolith - подходит для небольших приложений
	+ простая структура
	+ просто тестировать
	+ просто деплоить
	- код быстро усложняется
	- сложно поддерживать и расширять

N-Tier - приложение разделяется на несколько tiers (каждый tier отвечает за свой набор функций)
	Их (tiers) обычно три: Presentation, BuisnessLogic, Data (БД)
	+ tiers могут быть физически разделены, то есть быть на разных машинах
	+ могут разрабатываться независимо друг от друга
	- изменения в одном tier могут требовать изменений в другом

Service-Oriented - состоит из нескольких сервисов, каждый отвечает за свою бизнес-активность
	Сервисы не знают друг об друге - они общаются между собой через центральный модуль - Enterprise Service Bus (ESB),
	а он отправляет запрос на другой сервис
	Общение происходит по HTTP, FTP, TCP и другим протоволам передачи данных
	+ Простая расширяемость
	+ Нет повторяющегося функционала

Microservices - состоит из нескольких сервисов, каждый отвечает за свою бизнес-активность
	Сервисы общаются напрямую друг с другом
	+ Слабая связность, простая расширяемость
	+ Позволяет автоматизировать тестирование, деплоймент и мониторинг

Serverless

Peer to peer - нет центрального сервера, машины общаются между собой напрямую
	Может быть сервер, где регистрируются новые машины, а старую получают о ней информацию
	и потом они опять общаются напрямую без сервера
	- небезопасно

================== STRUCTURE PATTERNS ==================	
Layered - есть несколько слоев, по которым идет запрос от первого слоя к последнему, но не наоборот
	Слои:
		- Presentation:	UI
		- Application:	Translate between UI and business logic
		- Business:		Business logic
		- Persistence:	Code to interact with DB
		- Data:			Data
	+ Легко написать, код структурирован
	- Такой подход ведет к монолитному приложению, который потом сложно разбить на сервисы
	- Нужно писать много кода, чтобы перебрасывать запрос с одного слоя на другой
